import os
from datetime import datetime
import sys

sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), "..")))
import os
import requests

MODEL_NAME = "deepseek-chat"

DEEPSEEK_API_KEY = os.getenv("DEEPSEEK_API_KEY")
DEEPSEEK_API_URL = "https://api.deepseek.com/chat/completions"


def call_deepseek_api(prompt):
    if not DEEPSEEK_API_KEY:
        print("Error: DEEPSEEK_API_KEY is not set in .env file.")
        return None
    try:
        headers = {
            "Content-Type": "application/json",
            "Authorization": f"Bearer {DEEPSEEK_API_KEY}",
        }
        data = {
            "model": MODEL_NAME,
            "messages": [{"role": "user", "content": prompt}],
            "stream": False,
        }
        response = requests.post(DEEPSEEK_API_URL, headers=headers, json=data)
        response.raise_for_status()
        response_json = response.json()
        if (
            not response_json
            or not response_json.get("choices")
            or not response_json["choices"][0]["message"]["content"]
        ):
            print(f"  Error: Translation response is empty or invalid:")
            print(response.content)
            return None
        if response_json["choices"][0].get("finish_reason") not in ("stop", "length"):
            print(
                f"  Error: Translation did not finish with 'stop' or 'length' reason:"
            )
            print(response.content)
            return None
        print("Translation successful")
        translated_text = response_json["choices"][0]["message"]["content"]
        return translated_text
    except requests.exceptions.RequestException as e:
        print(f"  Translation failed with error: {e}")
        return None


if __name__ == "__main__":
    print(call_deepseek_api("hi"))


def determine_output_filename(output_file, recommend_desc):
    """Determine the output filename, generating a default if none provided."""
    if output_file is None:
        today = datetime.now().strftime("%Y-%m-%d")
        default_name_prompt = f"""Generate a filename segment consisting of exactly three English words, all lowercase, concatenated with hyphens, for a blog post recommending content for a {recommend_desc}. Example: 'recommend-for-engineers'. Output only the segment, without quotes or any other text. Ensure it is exactly three words."""
        default_name_response = (
            call_deepseek_api(prompt=default_name_prompt).strip().lower()
        )
        # Additional check to ensure exactly three words concatenated with hyphens
        parts = default_name_response.split("-")
        if len(parts) != 3 or not all(part.isalpha() for part in parts):
            print(
                "Warning: Generated filename segment does not meet criteria. Regenerating..."
            )
            # Optionally, you could loop to regenerate, but for simplicity, we'll just warn and proceed
        output_file = os.path.join("original", f"{today}-{default_name_response}-en.md")
    else:
        output_file = os.path.join("original", output_file)
    return output_file


def write_recommendations_file(output_file, ai_response, years, recommend_desc):
    """Write the AI-generated recommendations to a markdown file."""
    content = f"""---
audio: false
generated: true
lang: en
layout: post
title: Recommended Blog Posts for {recommend_desc.capitalize()}
translated: false
---

These recommendations are generated by AI based on blog posts from the last {years} year(s), tailored for a {recommend_desc}. Update this file by running the script every half year to refresh based on new posts.

{ai_response}
"""
    try:
        with open(output_file, "w", encoding="utf-8") as md_file:
            md_file.write(content)
        print(f"Updated {output_file}")
    except Exception as e:
        print(f"Error updating {output_file}: {e}")


if __name__ == "__main__":
    output_file = determine_output_filename(None, "software engineers")
    write_recommendations_file(
        output_file, "Sample AI response content", 2, "software engineers"
    )
